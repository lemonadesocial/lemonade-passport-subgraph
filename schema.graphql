type Referral @entity {
  id: Bytes! # tx hash
  referee: Bytes! # address
  referrer: Bytes! # address
  passport: Bytes! # address
  amount: BigInt!
}

type ExecutePurchase @entity {
  id: Bytes! # tx hash
  network: String!
  sender: Bytes! # address
  referrer: Bytes! # address
  tokenId: Int!
  success: Boolean!
}

type ExecuteReserve @entity {
  id: Bytes! # tx hash
  network: String!
  paymentId: Int!
  sender: Bytes! # address
  assignments: Int!
  referred: Boolean!
  success: Boolean!
}

type ExecuteClaim @entity {
  id: Bytes! # tx hash
  sender: Bytes! # address
  tokenId: Int!
}

type Citizen @entity {
  id: String! # passport address + wallet address

  citizenNumber: Int!
  chain: String!
  mintedAt: BigInt!
  updatedAt: BigInt!

  passport: Bytes! # address
  referralCount: Int!
}

type Account @entity {
  id: String! # passport contract address + wallet address
  claimedCount: Int!
  claimedAmount: BigInt!
  unclaimedCount: Int!
  unclaimedAmount: BigInt!
  totalCount: Int! # unclaimed + claimed
  totalAmount: BigInt! # unclaimed + claimed
}

# To easily map data between events
type Transaction @entity {
  id: Bytes! # tx hash
  sender: Bytes! # address
  referrer: Bytes # address
  passport: Bytes! # address
  referred: Boolean
  reservationCount: Int
}

type Reservation @entity {
  id: String! # passport address + payment id
  count: Int!
}

type Escrow @entity {
  id: Bytes! # address
  passport: Bytes! # address
}

# Convenient counters for each passports
# Record with address zero for id is counters for entire chain
type Statistic @entity {
  id: Bytes! # passport address / address zero
  totalReferralAmount: BigInt!
  totalReferralCount: Int!
}
